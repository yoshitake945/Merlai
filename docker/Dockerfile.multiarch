# Multi-architecture Dockerfile for Merlai
# Supports: linux/amd64, linux/arm64, linux/arm/v7

# Use buildx for multi-architecture builds
# Build command: docker buildx build --platform linux/amd64,linux/arm64 -f docker/Dockerfile.multiarch -t merlai:latest .

FROM --platform=$BUILDPLATFORM python:3.11-slim as base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libsndfile1 \
    libasound2-dev \
    portaudio19-dev \
    libportaudio2 \
    libportaudiocpp0 \
    ffmpeg \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel
RUN pip install --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies
COPY pyproject.toml /tmp/
RUN pip install -e /tmp/[cpu]

# Development stage
FROM base as development

# Install development dependencies
RUN pip install -e /tmp/[dev]

# Copy source code
COPY . /app
WORKDIR /app

# Create non-root user
RUN useradd -m -u 1000 merlai && chown -R merlai:merlai /app
USER merlai

# Expose ports
EXPOSE 8000 8001

# Default command
CMD ["uvicorn", "merlai.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

# Copy source code
COPY . /app
WORKDIR /app

# Create non-root user
RUN useradd -m -u 1000 merlai && chown -R merlai:merlai /app
USER merlai

# Expose ports
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["uvicorn", "merlai.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# GPU stage (AMD64 only)
FROM --platform=linux/amd64 nvidia/cuda:11.8-runtime-ubuntu22.04 as gpu

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3.10-venv \
    build-essential \
    libsndfile1 \
    libasound2-dev \
    portaudio19-dev \
    libportaudio2 \
    libportaudiocpp0 \
    ffmpeg \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python3.10 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel
RUN pip install --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies with GPU support
COPY pyproject.toml /tmp/
RUN pip install -e /tmp/[gpu]

# Copy source code
COPY . /app
WORKDIR /app

# Create non-root user
RUN useradd -m -u 1000 merlai && chown -R merlai:merlai /app
USER merlai

# Expose ports
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command for GPU inference
CMD ["python", "-m", "merlai.inference.server"] 