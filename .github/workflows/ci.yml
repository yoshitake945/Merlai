name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  # 軽量チェック（変更検出と基本的な品質チェック）
  quick-check:
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.check-docs.outputs.docs_only }}
      has_code_changes: ${{ steps.check-docs.outputs.has_code_changes }}
      has_docker_changes: ${{ steps.check-docs.outputs.has_docker_changes }}
    if: |
      github.event_name == 'push' || 
      github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for documentation changes only
        id: check-docs
        run: |
          # 変更されたファイルを取得
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # PRの場合
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            # Pushの場合 - より安全な方法
            if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              # コミットハッシュの存在確認
              if git rev-parse --verify "${{ github.event.before }}" >/dev/null 2>&1; then
                CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
              else
                # コミットが存在しない場合（force push等）
                echo "Warning: Previous commit ${{ github.event.before }} not found, checking all files"
                CHANGED_FILES=$(git ls-files)
              fi
            else
              # 初回プッシュや履歴が不完全な場合
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git ls-files)
            fi
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # ファイルタイプを分類
          DOC_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(md|txt|rst)$|^docs/|^README|^CHANGELOG|^LICENSE|^NOTICE' || true)
          CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(py|js|ts|java|cpp|c|h|go|rs)$|^merlai/|^tests/|^scripts/' || true)
          DOCKER_FILES=$(echo "$CHANGED_FILES" | grep -E 'Dockerfile|docker-compose|\.dockerignore|docker/' || true)
          
          echo "Document files: $DOC_FILES"
          echo "Code files: $CODE_FILES"
          echo "Docker files: $DOCKER_FILES"
          
          if [ -n "$CODE_FILES" ]; then
            echo "docs_only=false" >> $GITHUB_OUTPUT
            echo "has_code_changes=true" >> $GITHUB_OUTPUT
            echo "has_docker_changes=false" >> $GITHUB_OUTPUT
            echo "Decision: Code changes detected, will run full quality checks"
          elif [ -n "$DOCKER_FILES" ]; then
            echo "docs_only=false" >> $GITHUB_OUTPUT
            echo "has_code_changes=false" >> $GITHUB_OUTPUT
            echo "has_docker_changes=true" >> $GITHUB_OUTPUT
            echo "Decision: Docker changes detected, will run build"
          elif [ -n "$DOC_FILES" ]; then
            echo "docs_only=true" >> $GITHUB_OUTPUT
            echo "has_code_changes=false" >> $GITHUB_OUTPUT
            echo "has_docker_changes=false" >> $GITHUB_OUTPUT
            echo "Decision: Documentation changes only, will run quick check"
          else
            echo "docs_only=false" >> $GITHUB_OUTPUT
            echo "has_code_changes=false" >> $GITHUB_OUTPUT
            echo "has_docker_changes=false" >> $GITHUB_OUTPUT
            echo "Decision: No relevant changes, will run full pipeline"
          fi
          
          echo "Output values:"
          echo "docs_only: ${{ steps.check-docs.outputs.docs_only }}"
          echo "has_code_changes: ${{ steps.check-docs.outputs.has_code_changes }}"
          echo "has_docker_changes: ${{ steps.check-docs.outputs.has_docker_changes }}"
      
      - name: Set up Python for quality checks
        if: |
          steps.check-docs.outputs.has_code_changes == 'true' ||
          steps.check-docs.outputs.docs_only == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip for quality checks
        if: |
          steps.check-docs.outputs.has_code_changes == 'true' ||
          steps.check-docs.outputs.docs_only == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies for quality checks
        if: |
          steps.check-docs.outputs.has_code_changes == 'true' ||
          steps.check-docs.outputs.docs_only == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install black
      
      - name: Format check (black) - Quick Check
        if: |
          steps.check-docs.outputs.has_code_changes == 'true' ||
          steps.check-docs.outputs.docs_only == 'true'
        run: black --check merlai/
      
      - name: Quick format check for docs only
        if: |
          steps.check-docs.outputs.docs_only == 'true' &&
          steps.check-docs.outputs.has_code_changes == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install black
          black --check --diff .

  # フルチェック（コード変更時）
  lint:
    runs-on: ubuntu-latest
    needs: [quick-check]
    if: |
      needs.quick-check.outputs.has_code_changes == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Lint (flake8)
        run: flake8 merlai/

  typecheck:
    runs-on: ubuntu-latest
    needs: [quick-check]
    if: |
      needs.quick-check.outputs.has_code_changes == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Type check (mypy)
        run: mypy merlai/

  format:
    runs-on: ubuntu-latest
    needs: [quick-check]
    if: |
      needs.quick-check.outputs.has_code_changes == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Format check (black)
        run: black --check merlai/

  test:
    runs-on: ubuntu-latest
    needs: [quick-check, lint, typecheck, format]
    if: |
      needs.quick-check.outputs.has_code_changes == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Run tests
        run: pytest --disable-warnings -v
      
      - name: Run tests with coverage
        run: pytest --cov=merlai --cov-report=xml --cov-report=html --cov-report=term-missing
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [quick-check, test]
    if: |
      needs.quick-check.outputs.has_docker_changes == 'true' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.test.result == 'success') ||
      github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v0.1.0,enable={{is_default_branch}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
      
      - name: Build and push lightweight image only
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.lightweight
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  notify:
    runs-on: ubuntu-latest
    needs: [quick-check, lint, typecheck, format, test, build]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: |
          (needs.quick-check.result == 'success' || needs.quick-check.result == 'skipped') &&
          (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
          (needs.typecheck.result == 'success' || needs.typecheck.result == 'skipped') &&
          (needs.format.result == 'success' || needs.format.result == 'skipped') &&
          (needs.test.result == 'success' || needs.test.result == 'skipped') &&
          (needs.build.result == 'success' || needs.build.result == 'skipped')
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: success
          channel: '#ci-cd'
          text: |
            ✅ **Merlai CI Pipeline Succeeded**
            • Repository: ${{ github.repository }}
            • Branch: ${{ github.ref_name }}
            • Commit: ${{ github.sha }}
            • Triggered by: ${{ github.actor }}
            • Workflow: ${{ github.workflow }}

      - name: Notify Slack on Failure
        if: |
          needs.quick-check.result == 'failure' ||
          needs.lint.result == 'failure' ||
          needs.typecheck.result == 'failure' ||
          needs.format.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.build.result == 'failure'
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: failure
          channel: '#ci-cd'
          text: |
            ❌ **Merlai CI Pipeline Failed**
            • Repository: ${{ github.repository }}
            • Branch: ${{ github.ref_name }}
            • Commit: ${{ github.sha }}
            • Triggered by: ${{ github.actor }}
            • Workflow: ${{ github.workflow }} 