name: CI

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
  pull_request:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Lint (flake8)
        run: flake8 merlai/

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Type check (mypy)
        run: mypy merlai/

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Format check (black)
        run: black --check merlai/

  test:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, format]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Run tests
        run: pytest --disable-warnings -v

  build:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v0.1.0,enable={{is_default_branch}}
            type=raw,value=v0.1.0-dev,enable={{is_branch}} && {{branch == 'dev'}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.cpu
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: success
          channel: '#ci-cd'
          text: |
            ✅ **Merlai CI Pipeline Succeeded**
            • Repository: ${{ github.repository }}
            • Branch: ${{ github.ref_name }}
            • Commit: ${{ github.sha }}
            • Triggered by: ${{ github.actor }}
            • Workflow: ${{ github.workflow }}

      - name: Notify Slack on Failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: failure
          channel: '#ci-cd'
          text: |
            ❌ **Merlai CI Pipeline Failed**
            • Repository: ${{ github.repository }}
            • Branch: ${{ github.ref_name }}
            • Commit: ${{ github.sha }}
            • Triggered by: ${{ github.actor }}
            • Workflow: ${{ github.workflow }}
            • [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) 