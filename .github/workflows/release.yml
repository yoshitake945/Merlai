name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得してリリースノート生成に使用
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Merlai
            org.opencontainers.image.description=AI-powered music generation platform
            org.opencontainers.image.vendor=Merlai
            org.opencontainers.image.source={{repo}}
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.created={{created}}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
      
      - name: Build and push lightweight image only
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.lightweight
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Build and push Docker image (GPU)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.gpu
          push: true
          tags: ${{ steps.meta.outputs.tags }}-gpu
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          # 前回のタグから現在のタグまでのコミットを取得
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            # 初回リリースの場合
            COMMITS=$(git log --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          
          # リリースノートを生成
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Commits in this release:" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "$COMMITS" | while read line; do
            echo "- $line" >> RELEASE_NOTES.md
          done
          
          echo "### Docker Images" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "This release includes the following Docker images:" >> RELEASE_NOTES.md
          echo "- \`ghcr.io/${{ github.repository }}:{{version}}\` (Lightweight version - ~450MB)" >> RELEASE_NOTES.md
          echo "- \`ghcr.io/${{ github.repository }}:{{version}}-gpu\` (GPU version)" >> RELEASE_NOTES.md
          echo "- \`ghcr.io/${{ github.repository }}:{{major}}.{{minor}}\` (Lightweight version)" >> RELEASE_NOTES.md
          echo "- \`ghcr.io/${{ github.repository }}:{{major}}\` (Lightweight version)" >> RELEASE_NOTES.md
          echo "- \`ghcr.io/${{ github.repository }}:latest\` (Lightweight version)" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Note**: Optimized CPU version is temporarily unavailable due to CI/CD constraints." >> RELEASE_NOTES.md
          echo "- Lightweight: ~450MB (85% reduction from original)" >> RELEASE_NOTES.md
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false 