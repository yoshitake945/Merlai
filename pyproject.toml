[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "merlai"
version = "0.1.0"
description = "AI-powered music creation assistant for filling missing notes"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Merlai Team", email = "team@merlai.ai"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: MIDI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    # Core AI/ML
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "transformers>=4.30.0",
    "diffusers>=0.20.0",
    "accelerate>=0.20.0",
    
    # Audio/MIDI processing
    "librosa>=0.10.0",
    "midiutil>=1.2.1",
    "pretty_midi>=0.2.9",
    "soundfile>=0.12.0",
    
    # Web API
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    
    # Type safety
    "mypy>=1.4.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-html>=3.1.0",
    "pytest-xdist>=3.2.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pre-commit>=3.3.0",
    "click[testing]>=8.1.0",
    "httpx>=0.24.0",
]
test = [
    "pytest>=7.3.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-html>=3.1.0",
    "pytest-xdist>=3.2.0",
    "click[testing]>=8.1.0",
    "httpx>=0.24.0",
]
cpu = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "transformers>=4.30.0",
    "diffusers>=0.20.0",
    "accelerate>=0.20.0",
]
gpu = [
    "torch[cu118]>=2.0.0",
    "torchaudio[cu118]>=2.0.0",
]
docker = [
    "docker>=6.1.0",
    "kubernetes>=26.1.0",
]

[project.scripts]
merlai = "merlai.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["merlai"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
exclude = 'merlai/core/ai_models.py'

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "pretty_midi.*",
    "midiutil.*",
    "click.*",
    "uvicorn.*",
]

[[tool.mypy.overrides]]
module = "merlai.core.ai_models"
ignore_errors = true

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["merlai"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=merlai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=50",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "cli: marks tests as CLI tests",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["merlai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/venv/*",
    "*/env/*",
    "*/ENV/*",
    "*/env.bak/*",
    "*/venv.bak/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
